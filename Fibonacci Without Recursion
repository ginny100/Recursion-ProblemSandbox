/* The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibinacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. 
 * That is,
 * F(0) = 0, F(1) = 1
 * F(N) = F(N - 1) + F(N - 2), for N > 1
 * Given N, calculate F(N).
 *
 * Example 1 
 *     Input: 2
 *     Output: 1
 *     Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1
 *
 * Example 2
 *     Input: 3
 *     Output: 2
 *     Explanation: F(3) = F(2) + F(1) = F(1) + F(0) + F(1) = 1 + 0 + 1 = 2
 *
 * Example 3
 *     Input: 4
 *     Output: 3
 *     Explanation: F(4) = F(3) + F(2) = F(2) + F(1) + F(1) + F(0) = F(1) + F(0) + F(1) + F(1) + F(0) = 1 + 0 + 1 + 1 + 0 = 3
 *
 * Note: 0 <= N <= 30
 */
 
#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'fibonacci' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER N as parameter.
 * The fibonacci sequence of F(N) will be calculated
 * and the result returned. 
 *
 */

int fibonacci(int N) 
{
    int fib1 = 1;
    int fib2 = 1;
    int fib3 = 1;

    for(int i = 3; i <= N; i++)
    {
        fib3 = fib1 + fib2;
        fib1 = fib2;
        fib2 = fib3;
    }

    return fib2;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string N_temp;
    getline(cin, N_temp);

    int N = stoi(ltrim(rtrim(N_temp)));

    int result = fibonacci(N);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) 
{
    string s(str);
    s.erase(s.begin(), find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace))));
    return s;
}

string rtrim(const string &str) 
{
    string s(str);
    s.erase(find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(), s.end());
    return s;
}
